/**
 * Audio Notification Settings Component
 * User controls for configuring audio notifications
 * Requirements: 3.5 - Add configurable audio notifications for major incident lifecycle events
 */

"use client";

import React from "react";
import { motion, AnimatePresence } from "framer-motion";
import {
  Volume2,
  VolumeX,
  Settings,
  Play,
  Check,
  X,
  AlertTriangle,
  Activity,
  TrendingUp,
  Shield,
  Users,
  CheckCircle,
  User,
  XCircle,
  Headphones,
  Speaker,
} from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "./ui/card";
import { Badge } from "./ui/badge";
import { Progress } from "./ui/progress";
import { NotificationEvent } from "../lib/audio-notification-manager";
import { useAudioNotifications } from "../lib/hooks/useAudioNotifications";

const EVENT_ICONS = {
  incident_detected: AlertTriangle,
  phase_transition: Activity,
  agent_completed: CheckCircle,
  conflict_detected: TrendingUp,
  conflict_resolved: Shield,
  incident_resolved: CheckCircle,
  human_escalation: User,
  system_error: XCircle,
};

const EVENT_COLORS = {
  incident_detected: "text-red-600 bg-red-500/10 border-red-500/30",
  phase_transition: "text-blue-600 bg-blue-500/10 border-blue-500/30",
  agent_completed: "text-green-600 bg-green-500/10 border-green-500/30",
  conflict_detected: "text-yellow-600 bg-yellow-500/10 border-yellow-500/30",
  conflict_resolved: "text-purple-600 bg-purple-500/10 border-purple-500/30",
  incident_resolved: "text-emerald-600 bg-emerald-500/10 border-emerald-500/30",
  human_escalation: "text-orange-600 bg-orange-500/10 border-orange-500/30",
  system_error: "text-red-600 bg-red-500/10 border-red-500/30",
};

interface AudioNotificationSettingsProps {
  isOpen?: boolean;
  onClose?: () => void;
  compact?: boolean;
  className?: string;
}

const VolumeSlider = ({
  value,
  onChange,
}: {
  value: number;
  onChange: (value: number) => void;
}) => {
  return (
    <div className="space-y-2">
      <div className="flex items-center justify-between">
        <span className="text-sm font-medium">Volume</span>
        <span className="text-sm text-muted-foreground">
          {Math.round(value * 100)}%
        </span>
      </div>

      <div className="flex items-center gap-3">
        <VolumeX className="w-4 h-4 text-muted-foreground" />

        <div className="flex-1 relative">
          <input
            type="range"
            min="0"
            max="1"
            step="0.1"
            value={value}
            onChange={(e) => onChange(parseFloat(e.target.value))}
            className="w-full h-2 bg-muted rounded-lg appearance-none cursor-pointer slider"
          />
        </div>

        <Volume2 className="w-4 h-4 text-muted-foreground" />
      </div>

      <Progress value={value * 100} className="h-1" />
    </div>
  );
};

const SoundPackSelector = ({
  currentPack,
  packs,
  onChange,
}: {
  currentPack: string;
  packs: Array<{ id: string; name: string; description: string }>;
  onChange: (packId: string) => void;
}) => {
  return (
    <div className="space-y-3">
      <span className="text-sm font-medium">Sound Pack</span>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
        {packs.map((pack) => (
          <motion.div
            key={pack.id}
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
            className={`
              p-3 rounded-lg border-2 cursor-pointer transition-all duration-200
              ${
                currentPack === pack.id
                  ? "border-primary bg-primary/10 shadow-lg shadow-primary/20"
                  : "border-border bg-card hover:border-primary/50"
              }
            `}
            onClick={() => onChange(pack.id)}
          >
            <div className="flex items-center justify-between mb-2">
              <span className="font-medium text-sm">{pack.name}</span>
              {currentPack === pack.id && (
                <motion.div
                  initial={{ scale: 0 }}
                  animate={{ scale: 1 }}
                  className="w-5 h-5 bg-primary rounded-full flex items-center justify-center"
                >
                  <Check className="w-3 h-3 text-white" />
                </motion.div>
              )}
            </div>

            <p className="text-xs text-muted-foreground">{pack.description}</p>
          </motion.div>
        ))}
      </div>
    </div>
  );
};

const EventToggle = ({
  event,
  description,
  category,
  enabled,
  onToggle,
  onTest,
}: {
  event: NotificationEvent;
  description: string;
  category: string;
  enabled: boolean;
  onToggle: (enabled: boolean) => void;
  onTest: () => void;
}) => {
  const Icon = EVENT_ICONS[event];
  const colorClass = EVENT_COLORS[event];

  return (
    <motion.div
      initial={{ opacity: 0, y: 10 }}
      animate={{ opacity: 1, y: 0 }}
      className={`
        p-4 rounded-lg border transition-all duration-200
        ${enabled ? colorClass : "border-border bg-card"}
      `}
    >
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-3">
          <div
            className={`p-2 rounded-lg ${
              enabled ? "" : "bg-muted text-muted-foreground"
            }`}
          >
            <Icon className="w-4 h-4" />
          </div>

          <div>
            <div className="font-medium text-sm">{description}</div>
            <div className="text-xs text-muted-foreground">{category}</div>
          </div>
        </div>

        <div className="flex items-center gap-2">
          {/* Test Button */}
          <motion.button
            whileHover={{ scale: 1.1 }}
            whileTap={{ scale: 0.9 }}
            onClick={onTest}
            className="p-2 rounded-lg bg-muted hover:bg-muted/80 text-muted-foreground hover:text-foreground transition-colors"
            title="Test sound"
          >
            <Play className="w-3 h-3" />
          </motion.button>

          {/* Toggle Switch */}
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={() => onToggle(!enabled)}
            className={`
              relative w-12 h-6 rounded-full transition-colors duration-200
              ${enabled ? "bg-primary" : "bg-muted"}
            `}
          >
            <motion.div
              animate={{ x: enabled ? 24 : 2 }}
              transition={{ type: "spring", stiffness: 500, damping: 30 }}
              className="absolute top-1 w-4 h-4 bg-white rounded-full shadow-sm"
            />
          </motion.button>
        </div>
      </div>
    </motion.div>
  );
};

const InitializationPrompt = ({
  onInitialize,
}: {
  onInitialize: () => void;
}) => {
  return (
    <motion.div
      initial={{ opacity: 0, scale: 0.9 }}
      animate={{ opacity: 1, scale: 1 }}
      className="text-center py-8"
    >
      <div className="mb-4">
        <Headphones className="w-12 h-12 mx-auto text-muted-foreground mb-4" />
        <h3 className="text-lg font-semibold mb-2">
          Enable Audio Notifications
        </h3>
        <p className="text-sm text-muted-foreground max-w-md mx-auto">
          Audio notifications require user interaction to initialize. Click the
          button below to enable sound notifications.
        </p>
      </div>

      <motion.button
        whileHover={{ scale: 1.05 }}
        whileTap={{ scale: 0.95 }}
        onClick={onInitialize}
        className="px-6 py-3 bg-primary text-primary-foreground rounded-lg font-medium flex items-center gap-2 mx-auto"
      >
        <Speaker className="w-4 h-4" />
        Initialize Audio System
      </motion.button>
    </motion.div>
  );
};

export default function AudioNotificationSettings({
  isOpen = true,
  onClose,
  compact = false,
  className = "",
}: AudioNotificationSettingsProps) {
  const {
    config,
    isSupported,
    isInitialized,
    updateConfig,
    setEventEnabled,
    testNotification,
    initialize,
    getSoundPacks,
    getAvailableEvents,
  } = useAudioNotifications();

  const soundPacks = getSoundPacks();
  const availableEvents = getAvailableEvents();

  // Group events by category
  const eventsByCategory = availableEvents.reduce((acc, event) => {
    if (!acc[event.category]) {
      acc[event.category] = [];
    }
    acc[event.category].push(event);
    return acc;
  }, {} as Record<string, typeof availableEvents>);

  const handleInitialize = async () => {
    await initialize();
    // Enable audio notifications after initialization
    updateConfig({ enabled: true });
  };

  const handleTestEvent = async (event: NotificationEvent) => {
    try {
      await testNotification(event);
    } catch (error) {
      console.warn("Failed to test notification:", error);
    }
  };

  if (!isSupported) {
    return (
      <Card className={`relative overflow-hidden ${className}`}>
        <CardContent className="p-6">
          <div className="text-center py-8 text-muted-foreground">
            <XCircle className="w-12 h-12 mx-auto mb-4 opacity-50" />
            <h3 className="text-lg font-semibold mb-2">Audio Not Supported</h3>
            <p className="text-sm">
              Your browser doesn't support audio notifications.
            </p>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <AnimatePresence>
      {isOpen && (
        <Card className={`relative overflow-hidden ${className}`}>
          <CardHeader className="pb-4">
            <CardTitle className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <Settings className="w-5 h-5 text-primary" />
                Audio Notifications
              </div>

              {onClose && (
                <motion.button
                  whileHover={{ scale: 1.1 }}
                  whileTap={{ scale: 0.9 }}
                  onClick={onClose}
                  className="p-2 rounded-lg hover:bg-muted text-muted-foreground hover:text-foreground"
                >
                  <X className="w-4 h-4" />
                </motion.button>
              )}
            </CardTitle>
          </CardHeader>

          <CardContent className="space-y-6">
            {!isInitialized ? (
              <InitializationPrompt onInitialize={handleInitialize} />
            ) : (
              <>
                {/* Master Enable/Disable */}
                <div className="flex items-center justify-between p-4 rounded-lg border">
                  <div className="flex items-center gap-3">
                    <div
                      className={`p-2 rounded-lg ${
                        config.enabled
                          ? "bg-primary/20 text-primary"
                          : "bg-muted text-muted-foreground"
                      }`}
                    >
                      {config.enabled ? (
                        <Volume2 className="w-5 h-5" />
                      ) : (
                        <VolumeX className="w-5 h-5" />
                      )}
                    </div>

                    <div>
                      <div className="font-medium">Audio Notifications</div>
                      <div className="text-sm text-muted-foreground">
                        {config.enabled ? "Enabled" : "Disabled"}
                      </div>
                    </div>
                  </div>

                  <motion.button
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                    onClick={() => updateConfig({ enabled: !config.enabled })}
                    className={`
                      relative w-16 h-8 rounded-full transition-colors duration-200
                      ${config.enabled ? "bg-primary" : "bg-muted"}
                    `}
                  >
                    <motion.div
                      animate={{ x: config.enabled ? 32 : 4 }}
                      transition={{
                        type: "spring",
                        stiffness: 500,
                        damping: 30,
                      }}
                      className="absolute top-1 w-6 h-6 bg-white rounded-full shadow-sm"
                    />
                  </motion.button>
                </div>

                {config.enabled && (
                  <motion.div
                    initial={{ opacity: 0, height: 0 }}
                    animate={{ opacity: 1, height: "auto" }}
                    exit={{ opacity: 0, height: 0 }}
                    className="space-y-6"
                  >
                    {/* Volume Control */}
                    <VolumeSlider
                      value={config.volume}
                      onChange={(volume) => updateConfig({ volume })}
                    />

                    {/* Sound Pack Selection */}
                    <SoundPackSelector
                      currentPack={config.soundPack}
                      packs={soundPacks}
                      onChange={(packId) => {
                        const selectedPack = soundPacks.find(
                          (pack) => pack.id === packId
                        );
                        if (selectedPack) {
                          updateConfig({
                            soundPack: selectedPack.id as
                              | "default"
                              | "minimal"
                              | "professional"
                              | "retro",
                          });
                        }
                      }}
                    />

                    {/* Event Configuration */}
                    <div className="space-y-4">
                      <div className="flex items-center justify-between">
                        <span className="text-sm font-medium">
                          Notification Events
                        </span>
                        <Badge>
                          {config.enabledEvents.size} of{" "}
                          {availableEvents.length} enabled
                        </Badge>
                      </div>

                      {Object.entries(eventsByCategory).map(
                        ([category, events]) => (
                          <div key={category} className="space-y-3">
                            <h4 className="text-sm font-medium text-muted-foreground uppercase tracking-wide">
                              {category}
                            </h4>

                            <div className="space-y-2">
                              {events.map((eventInfo) => (
                                <EventToggle
                                  key={eventInfo.event}
                                  event={eventInfo.event}
                                  description={eventInfo.description}
                                  category={eventInfo.category}
                                  enabled={config.enabledEvents.has(
                                    eventInfo.event
                                  )}
                                  onToggle={(enabled) =>
                                    setEventEnabled(eventInfo.event, enabled)
                                  }
                                  onTest={() =>
                                    handleTestEvent(eventInfo.event)
                                  }
                                />
                              ))}
                            </div>
                          </div>
                        )
                      )}
                    </div>
                  </motion.div>
                )}
              </>
            )}
          </CardContent>
        </Card>
      )}
    </AnimatePresence>
  );
}
