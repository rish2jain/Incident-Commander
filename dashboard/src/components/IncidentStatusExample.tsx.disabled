/**
 * IncidentStatusExample - Example component demonstrating incident status tracking
 */

import React, { useEffect, useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import {
  Play,
  Square,
  RotateCcw,
  CheckCircle,
  Clock,
  AlertTriangle,
  Activity,
  TrendingUp,
} from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "./ui/card";
import { Button } from "./ui/button";
import { Badge } from "./ui/badge";
import { Progress } from "./ui/progress";
import { useIncidentStatus } from "../lib/hooks/useIncidentStatus";
import { IncidentResolution } from "../lib/incident-status-tracker";
import { IncidentPhase } from "../lib/phase-transition-manager";

const PHASE_ICONS = {
  detection: <Activity className="w-4 h-4" />,
  diagnosis: <AlertTriangle className="w-4 h-4" />,
  prediction: <TrendingUp className="w-4 h-4" />,
  resolution: <CheckCircle className="w-4 h-4" />,
  communication: <Clock className="w-4 h-4" />,
  resolved: <CheckCircle className="w-4 h-4" />,
};

const PHASE_COLORS = {
  detection: "bg-blue-500",
  diagnosis: "bg-orange-500",
  prediction: "bg-purple-500",
  resolution: "bg-green-500",
  communication: "bg-indigo-500",
  resolved: "bg-emerald-500",
};

const SEVERITY_COLORS = {
  low: "border-blue-500 text-blue-600",
  medium: "border-yellow-500 text-yellow-600",
  high: "border-orange-500 text-orange-600",
  critical: "border-red-500 text-red-600",
};

export default function IncidentStatusExample() {
  const {
    currentIncident,
    isActive,
    isResolved,
    progress,
    currentPhase,
    estimatedCompletion,
    resolutionTime,
    phaseProgress,
    completedPhases,
    remainingPhases,
    startIncident,
    updateStatus,
    markResolved,
    clearIncident,
    onResolution,
    onPhaseTransition,
    formatDuration,
    getBusinessImpact,
  } = useIncidentStatus();

  const [resolutionData, setResolutionData] =
    useState<IncidentResolution | null>(null);
  const [showCelebration, setShowCelebration] = useState(false);

  // Handle resolution notifications
  useEffect(() => {
    const unsubscribe = onResolution((resolution) => {
      setResolutionData(resolution);
      setShowCelebration(true);

      // Hide celebration after specified duration
      setTimeout(() => {
        setShowCelebration(false);
      }, resolution.celebrationDuration);

      // Clear resolution data after fade out delay
      setTimeout(() => {
        setResolutionData(null);
      }, resolution.fadeOutDelay);
    });

    return unsubscribe;
  }, [onResolution]);

  // Handle phase transitions
  useEffect(() => {
    const unsubscribe = onPhaseTransition((transition) => {
      console.log(
        `Phase transition: ${transition.from} â†’ ${transition.to} (${transition.duration}s)`
      );
    });

    return unsubscribe;
  }, [onPhaseTransition]);

  const handleStartIncident = () => {
    const severities = ["low", "medium", "high", "critical"] as const;
    const randomSeverity =
      severities[Math.floor(Math.random() * severities.length)];

    startIncident({
      id: `demo-incident-${Date.now()}`,
      title: "Database Performance Degradation",
      description: "Experiencing high latency and connection timeouts",
      severity: randomSeverity,
      phase: "detection",
    });
  };

  const handleSimulateProgress = () => {
    if (!currentIncident) return;

    const phases: IncidentPhase[] = [
      "detection",
      "diagnosis",
      "prediction",
      "resolution",
      "communication",
    ];
    const currentIndex = phases.indexOf(currentIncident.phase);

    if (currentIndex >= 0 && currentIndex < phases.length - 1) {
      const nextPhase = phases[currentIndex + 1];
      updateStatus({ phase: nextPhase });
    } else {
      markResolved();
    }
  };

  const businessImpact = getBusinessImpact();

  return (
    <div className="w-full max-w-4xl mx-auto p-6 space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Activity className="w-5 h-5" />
            Incident Status Tracking Demo
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* Control Buttons */}
          <div className="flex gap-2 flex-wrap">
            <Button
              onClick={handleStartIncident}
              disabled={isActive}
              className="flex items-center gap-2"
            >
              <Play className="w-4 h-4" />
              Start Incident
            </Button>

            <Button
              onClick={handleSimulateProgress}
              disabled={!isActive || isResolved}
              variant="outline"
              className="flex items-center gap-2"
            >
              <TrendingUp className="w-4 h-4" />
              Next Phase
            </Button>

            <Button
              onClick={() => markResolved()}
              disabled={!isActive || isResolved}
              variant="outline"
              className="flex items-center gap-2"
            >
              <CheckCircle className="w-4 h-4" />
              Mark Resolved
            </Button>

            <Button
              onClick={clearIncident}
              disabled={!currentIncident}
              variant="outline"
              className="flex items-center gap-2"
            >
              <RotateCcw className="w-4 h-4" />
              Clear
            </Button>
          </div>

          {/* Incident Status Display */}
          <AnimatePresence>
            {currentIncident && (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                className="space-y-4"
              >
                {/* Incident Header */}
                <div className="flex items-start justify-between">
                  <div className="space-y-2">
                    <div className="flex items-center gap-2">
                      <Badge variant="outline" className="font-mono">
                        {currentIncident.id}
                      </Badge>
                      <Badge
                        className={`border-2 ${
                          SEVERITY_COLORS[currentIncident.severity || "medium"]
                        }`}
                        variant="outline"
                      >
                        {currentIncident.severity?.toUpperCase()}
                      </Badge>
                    </div>
                    <h3 className="text-xl font-semibold">
                      {currentIncident.title}
                    </h3>
                    <p className="text-muted-foreground">
                      {currentIncident.description}
                    </p>
                  </div>

                  <div className="text-right space-y-1">
                    <div className="text-sm text-muted-foreground">
                      {isResolved ? "Resolution Time" : "Duration"}
                    </div>
                    <div className="font-mono text-lg">
                      {isResolved && resolutionTime
                        ? formatDuration(resolutionTime)
                        : formatDuration(
                            Math.floor(
                              (Date.now() -
                                currentIncident.startTime.getTime()) /
                                1000
                            )
                          )}
                    </div>
                  </div>
                </div>

                {/* Overall Progress */}
                <div className="space-y-2">
                  <div className="flex justify-between text-sm">
                    <span>Overall Progress</span>
                    <span>{Math.round(progress)}%</span>
                  </div>
                  <Progress value={progress} className="h-2" />
                </div>

                {/* Phase Progress */}
                <div className="space-y-3">
                  <h4 className="font-medium">Phase Progress</h4>
                  <div className="grid grid-cols-1 md:grid-cols-5 gap-2">
                    {Object.entries(phaseProgress).map(
                      ([phase, phaseProgressValue]) => (
                        <motion.div
                          key={phase}
                          initial={{ scale: 0.9, opacity: 0 }}
                          animate={{ scale: 1, opacity: 1 }}
                          className={`p-3 rounded-lg border-2 transition-all ${
                            phase === currentPhase
                              ? "border-primary bg-primary/10"
                              : completedPhases.includes(phase)
                              ? "border-green-500 bg-green-500/10"
                              : "border-muted bg-muted/50"
                          }`}
                        >
                          <div className="flex items-center gap-2 mb-2">
                            <div
                              className={`p-1 rounded ${
                                PHASE_COLORS[phase as keyof typeof PHASE_COLORS]
                              } text-white`}
                            >
                              {PHASE_ICONS[phase as keyof typeof PHASE_ICONS]}
                            </div>
                            <span className="text-sm font-medium capitalize">
                              {phase}
                            </span>
                          </div>
                          <div className="space-y-1">
                            <Progress
                              value={phaseProgressValue}
                              className="h-1"
                            />
                            <div className="text-xs text-muted-foreground">
                              {Math.round(phaseProgressValue)}%
                            </div>
                          </div>
                        </motion.div>
                      )
                    )}
                  </div>
                </div>

                {/* Estimated Completion */}
                {estimatedCompletion && !isResolved && (
                  <div className="flex items-center gap-2 text-sm text-muted-foreground">
                    <Clock className="w-4 h-4" />
                    <span>
                      Estimated completion:{" "}
                      {estimatedCompletion.toLocaleTimeString()}
                    </span>
                  </div>
                )}

                {/* Business Impact (when resolved) */}
                {isResolved && businessImpact && (
                  <motion.div
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    className="p-4 rounded-lg bg-green-500/10 border border-green-500/20"
                  >
                    <h4 className="font-medium text-green-700 dark:text-green-300 mb-2">
                      Business Impact
                    </h4>
                    <div className="grid grid-cols-3 gap-4 text-sm">
                      <div>
                        <div className="text-muted-foreground">Cost Saved</div>
                        <div className="font-semibold">
                          ${businessImpact.costSaved.toLocaleString()}
                        </div>
                      </div>
                      <div>
                        <div className="text-muted-foreground">Downtime</div>
                        <div className="font-semibold">
                          {formatDuration(businessImpact.downtime)}
                        </div>
                      </div>
                      <div>
                        <div className="text-muted-foreground">
                          Affected Users
                        </div>
                        <div className="font-semibold">
                          {businessImpact.affectedUsers.toLocaleString()}
                        </div>
                      </div>
                    </div>
                  </motion.div>
                )}
              </motion.div>
            )}
          </AnimatePresence>

          {/* Resolution Celebration */}
          <AnimatePresence>
            {showCelebration && resolutionData && (
              <motion.div
                initial={{ scale: 0.8, opacity: 0 }}
                animate={{ scale: 1, opacity: 1 }}
                exit={{ scale: 0.8, opacity: 0 }}
                className="fixed inset-0 flex items-center justify-center bg-black/50 z-50"
              >
                <motion.div
                  initial={{ y: 50 }}
                  animate={{ y: 0 }}
                  className="bg-background border rounded-lg p-8 max-w-md mx-4 text-center space-y-4"
                >
                  <motion.div
                    animate={{ rotate: 360 }}
                    transition={{ duration: 1, ease: "easeInOut" }}
                  >
                    <CheckCircle className="w-16 h-16 text-green-500 mx-auto" />
                  </motion.div>

                  <div>
                    <h3 className="text-2xl font-bold text-green-600">
                      Incident Resolved!
                    </h3>
                    <p className="text-muted-foreground mt-2">
                      {resolutionData.resolutionSummary}
                    </p>
                  </div>

                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <div className="text-muted-foreground">
                        Resolution Time
                      </div>
                      <div className="font-semibold">
                        {formatDuration(resolutionData.resolutionTime)}
                      </div>
                    </div>
                    <div>
                      <div className="text-muted-foreground">
                        Phases Completed
                      </div>
                      <div className="font-semibold">
                        {resolutionData.completedPhases}/
                        {resolutionData.totalPhases}
                      </div>
                    </div>
                  </div>
                </motion.div>
              </motion.div>
            )}
          </AnimatePresence>

          {/* No Active Incident */}
          {!currentIncident && (
            <div className="text-center py-8 text-muted-foreground">
              <Activity className="w-12 h-12 mx-auto mb-4 opacity-50" />
              <p>
                No active incident. Click "Start Incident" to begin tracking.
              </p>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
