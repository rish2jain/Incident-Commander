import * as React from "react";
import { motion, AnimatePresence } from "framer-motion";
import * as ReactWindow from "react-window";
const List = (ReactWindow as any).FixedSizeList;
import {
  Search,
  Stethoscope,
  Sparkles,
  Wrench,
  MessageSquare,
  Clock,
  CheckCircle,
  AlertCircle,
  XCircle,
  Loader2,
  TrendingUp,
  Zap,
} from "lucide-react";
import { Badge } from "./ui/badge";
import { ScrollArea } from "./ui/scroll-area";
import { Card, CardContent, CardHeader, CardTitle } from "./ui/card";
import { FloatingScrollIndicator } from "./ui/scroll-indicator";
import { useAutoScroll } from "../lib/hooks/useAutoScroll";
import { cn } from "../lib/utils";
import {
  useOptimizedList,
  useStableCallback,
  usePerformanceMonitor,
  useDeepMemo,
  BatchUpdateManager,
} from "../lib/performance-manager";

interface AgentAction {
  id: string;
  agent_type:
    | "detection"
    | "diagnosis"
    | "prediction"
    | "resolution"
    | "communication";
  title: string;
  description: string;
  timestamp: string;
  confidence?: number;
  status: "pending" | "in_progress" | "completed" | "failed";
  details?: Record<string, any>;
  duration?: number;
  impact?: string;
}

interface OptimizedActivityFeedProps {
  actions: AgentAction[];
  maxItems?: number;
  showConfidence?: boolean;
  className?: string;
  autoScrollEnabled?: boolean;
  onActionClick?: (action: AgentAction) => void;
  enableVirtualization?: boolean;
  itemHeight?: number;
}

const agentConfig = {
  detection: {
    icon: Search,
    color: "from-red-500 to-red-600",
    bgColor: "from-red-500/10 to-red-600/10",
    borderColor: "border-red-500/20",
    textColor: "text-red-500",
    name: "Detection",
  },
  diagnosis: {
    icon: Stethoscope,
    color: "from-teal-500 to-teal-600",
    bgColor: "from-teal-500/10 to-teal-600/10",
    borderColor: "border-teal-500/20",
    textColor: "text-teal-500",
    name: "Diagnosis",
  },
  prediction: {
    icon: Sparkles,
    color: "from-blue-500 to-blue-600",
    bgColor: "from-blue-500/10 to-blue-600/10",
    borderColor: "border-blue-500/20",
    textColor: "text-blue-500",
    name: "Prediction",
  },
  resolution: {
    icon: Wrench,
    color: "from-amber-500 to-amber-600",
    bgColor: "from-amber-500/10 to-amber-600/10",
    borderColor: "border-amber-500/20",
    textColor: "text-amber-500",
    name: "Resolution",
  },
  communication: {
    icon: MessageSquare,
    color: "from-purple-500 to-purple-600",
    bgColor: "from-purple-500/10 to-purple-600/10",
    borderColor: "border-purple-500/20",
    textColor: "text-purple-500",
    name: "Communication",
  },
};

const statusConfig: Record<
  string,
  {
    icon: React.ElementType;
    color: string;
    bgColor: string;
    label: string;
    animate?: boolean;
  }
> = {
  pending: {
    icon: Clock,
    color: "text-amber-500",
    bgColor: "bg-amber-500/10",
    label: "Pending",
  },
  in_progress: {
    icon: Loader2,
    color: "text-blue-500",
    bgColor: "bg-blue-500/10",
    label: "In Progress",
    animate: true,
  },
  completed: {
    icon: CheckCircle,
    color: "text-green-500",
    bgColor: "bg-green-500/10",
    label: "Completed",
  },
  failed: {
    icon: XCircle,
    color: "text-red-500",
    bgColor: "bg-red-500/10",
    label: "Failed",
  },
};

// Memoized confidence bar component
const ConfidenceBar = React.memo(function ConfidenceBar({
  confidence,
}: {
  confidence: number;
}) {
  return (
    <div className="w-full h-1.5 bg-muted/50 rounded-full overflow-hidden mt-2">
      <motion.div
        className="h-full bg-gradient-to-r from-red-500 via-amber-500 to-green-500 rounded-full"
        initial={{ width: 0 }}
        animate={{ width: `${confidence * 100}%` }}
        transition={{ duration: 0.8, ease: "easeOut" }}
      />
    </div>
  );
});

// Highly optimized activity item component
const OptimizedActivityItem = React.memo(
  function OptimizedActivityItem({
    action,
    index,
    onClick,
    style,
  }: {
    action: AgentAction;
    index: number;
    onClick?: (action: AgentAction) => void;
    style?: React.CSSProperties;
  }) {
    // Memoize agent and status info to prevent recalculation
    const agentInfo = React.useMemo(
      () => agentConfig[action.agent_type],
      [action.agent_type]
    );
    const statusInfo = React.useMemo(
      () => statusConfig[action.status],
      [action.status]
    );

    const AgentIcon = agentInfo.icon;
    const StatusIcon = statusInfo.icon;

    // Stable callback to prevent re-renders
    const handleClick = useStableCallback(() => {
      onClick?.(action);
    }, [onClick, action.id]);

    // Memoize formatted timestamp
    const formattedTime = React.useMemo(() => {
      return new Date(action.timestamp).toLocaleTimeString();
    }, [action.timestamp]);

    // Memoize details entries
    const detailEntries = React.useMemo(() => {
      return action.details ? Object.entries(action.details) : [];
    }, [action.details]);

    return (
      <div style={style} className="px-3 py-2">
        <motion.div
          initial={{ opacity: 0, y: 20, scale: 0.95 }}
          animate={{ opacity: 1, y: 0, scale: 1 }}
          exit={{ opacity: 0, y: -20, scale: 0.95 }}
          transition={{
            duration: 0.4,
            delay: Math.min(index * 0.05, 0.5), // Cap delay for performance
            type: "spring",
            stiffness: 400,
            damping: 25,
          }}
          className="group relative"
        >
          <Card
            className={cn(
              "border-border/50 bg-card/50 backdrop-blur-sm hover:bg-card/80 transition-all duration-300 hover:shadow-lg hover:shadow-primary/5",
              onClick && "cursor-pointer"
            )}
            onClick={handleClick}
          >
            <CardContent className="p-4">
              <div className="flex gap-3">
                {/* Agent Avatar */}
                <motion.div
                  className={`flex-shrink-0 w-10 h-10 rounded-xl bg-gradient-to-br ${agentInfo.bgColor} border ${agentInfo.borderColor} flex items-center justify-center`}
                  whileHover={{ scale: 1.05 }}
                  transition={{ type: "spring", stiffness: 400, damping: 10 }}
                >
                  <AgentIcon className={`w-5 h-5 ${agentInfo.textColor}`} />
                </motion.div>

                <div className="flex-1 min-w-0">
                  {/* Header */}
                  <div className="flex items-start justify-between gap-2 mb-2">
                    <div className="flex-1 min-w-0">
                      <div className="flex items-center gap-2 mb-1">
                        <h4 className="font-semibold text-sm text-foreground truncate">
                          {agentInfo.name} Agent
                        </h4>
                        <Badge
                          variant="outline"
                          className={cn(
                            `text-xs ${statusInfo.bgColor} ${statusInfo.color} border-current/20`
                          )}
                        >
                          <StatusIcon
                            className={`w-3 h-3 mr-1 ${
                              statusInfo.animate ? "animate-spin" : ""
                            }`}
                          />
                          {statusInfo.label}
                        </Badge>
                      </div>
                      <h5 className="font-medium text-sm text-foreground/90 mb-1">
                        {action.title}
                      </h5>
                    </div>

                    <div className="flex items-center gap-2 text-xs text-muted-foreground">
                      <Clock className="w-3 h-3" />
                      {formattedTime}
                    </div>
                  </div>

                  {/* Description */}
                  <p className="text-sm text-muted-foreground leading-relaxed mb-3">
                    {action.description}
                  </p>

                  {/* Details */}
                  {detailEntries.length > 0 && (
                    <div className="bg-muted/30 rounded-lg p-3 mb-3 border border-border/30">
                      <div className="grid grid-cols-2 gap-2 text-xs">
                        {detailEntries.map(([key, value]) => (
                          <div key={key} className="flex justify-between">
                            <span className="text-muted-foreground capitalize">
                              {key.replace(/_/g, " ")}:
                            </span>
                            <span className="font-medium text-foreground">
                              {typeof value === "object"
                                ? JSON.stringify(value)
                                : String(value)}
                            </span>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}

                  {/* Footer */}
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      {action.duration && (
                        <div className="flex items-center gap-1 text-xs text-muted-foreground">
                          <Zap className="w-3 h-3" />
                          {action.duration}ms
                        </div>
                      )}
                      {action.impact && (
                        <div className="flex items-center gap-1 text-xs text-muted-foreground">
                          <TrendingUp className="w-3 h-3" />
                          {action.impact}
                        </div>
                      )}
                    </div>

                    {action.confidence !== undefined && (
                      <div className="text-xs text-muted-foreground">
                        Confidence: {Math.round(action.confidence * 100)}%
                      </div>
                    )}
                  </div>

                  {/* Confidence Bar */}
                  {action.confidence !== undefined && (
                    <ConfidenceBar confidence={action.confidence} />
                  )}
                </div>
              </div>
            </CardContent>
          </Card>
        </motion.div>
      </div>
    );
  },
  (prevProps, nextProps) => {
    // Custom comparison for better memoization
    return (
      prevProps.action.id === nextProps.action.id &&
      prevProps.action.status === nextProps.action.status &&
      prevProps.action.confidence === nextProps.action.confidence &&
      prevProps.index === nextProps.index
    );
  }
);

// Virtualized list item renderer
const VirtualizedItem = React.memo(function VirtualizedItem({
  index,
  style,
  data,
}: {
  index: number;
  style: React.CSSProperties;
  data: {
    actions: AgentAction[];
    onActionClick?: (action: AgentAction) => void;
  };
}) {
  const action = data.actions[index];
  if (!action) return null;

  return (
    <OptimizedActivityItem
      action={action}
      index={index}
      onClick={data.onActionClick}
      style={style}
    />
  );
});

export default function OptimizedActivityFeed({
  actions,
  maxItems = 15,
  showConfidence = true,
  className = "",
  autoScrollEnabled = true,
  onActionClick,
  enableVirtualization = true,
  itemHeight = 200,
}: OptimizedActivityFeedProps) {
  // Performance monitoring
  usePerformanceMonitor("OptimizedActivityFeed");

  // Batch update manager for high-frequency updates
  const batchUpdateManager = React.useMemo(() => new BatchUpdateManager(), []);

  // Cleanup batch manager on unmount
  React.useEffect(() => {
    return () => batchUpdateManager.clear();
  }, [batchUpdateManager]);

  // Optimized list with memoization
  const keyExtractor = React.useCallback(
    (action: AgentAction, index: number) => action.id,
    []
  );

  const {
    items: optimizedActions,
    shouldVirtualize,
    getVisibleRange,
  } = useOptimizedList(actions.slice(0, maxItems), keyExtractor, {
    enableVirtualization,
    maxItemsBeforeVirtualization: 50,
    batchUpdateDelay: 16,
  });

  // Memoize display actions with deep comparison
  const displayActions = useDeepMemo(optimizedActions, [optimizedActions]);

  // Track new messages for scroll indicator with performance optimization
  const [previousActionCount, setPreviousActionCount] = React.useState(
    actions.length
  );
  const [newMessageCount, setNewMessageCount] = React.useState(0);
  const [resumeCountdown, setResumeCountdown] = React.useState<number | null>(
    null
  );

  // Performance optimization: detect high-frequency updates
  const isHighFrequency = React.useMemo(() => {
    const now = Date.now();
    const recentActions = actions.filter(
      (action) => now - new Date(action.timestamp).getTime() < 5000
    );
    return recentActions.length > 20; // Increased threshold for better performance
  }, [actions]);

  // Auto-scroll functionality with performance optimizations
  const {
    scrollRef,
    scrollState,
    isNearBottom,
    isPaused,
    scrollToBottom,
    pauseAutoScroll,
    resumeAutoScroll,
    shouldShowScrollToBottom,
  } = useAutoScroll({
    enabled: autoScrollEnabled,
    dependencies: [actions.length],
    threshold: 100,
    resumeDelay: 1500,
    smoothScroll: !isHighFrequency,
    maxScrollSpeed: isHighFrequency ? 5 : 2,
    debounceDelay: isHighFrequency ? 25 : 100,
  });

  // Optimized new message tracking with batching
  React.useEffect(() => {
    if (actions.length > previousActionCount) {
      const newMessages = actions.length - previousActionCount;

      if (isHighFrequency) {
        // Batch updates during high frequency
        batchUpdateManager.scheduleUpdate(() => {
          setNewMessageCount((prev) => prev + newMessages);
          setPreviousActionCount(actions.length);
        });
      } else {
        setNewMessageCount((prev) => prev + newMessages);
        setPreviousActionCount(actions.length);
      }
    }
  }, [
    actions.length,
    previousActionCount,
    isHighFrequency,
    batchUpdateManager,
  ]);

  // Clear new message count when user scrolls to bottom
  React.useEffect(() => {
    if (isNearBottom) {
      setNewMessageCount(0);
    }
  }, [isNearBottom]);

  // Handle resume countdown when paused
  React.useEffect(() => {
    let countdownInterval: NodeJS.Timeout | null = null;

    if (isPaused && scrollState.isUserScrolling) {
      setResumeCountdown(1.5);

      countdownInterval = setInterval(() => {
        setResumeCountdown((prev) => {
          if (prev === null || prev <= 0.1) {
            return null;
          }
          return prev - 0.1;
        });
      }, 100);
    } else {
      setResumeCountdown(null);
    }

    return () => {
      if (countdownInterval) {
        clearInterval(countdownInterval);
      }
    };
  }, [isPaused, scrollState.isUserScrolling]);

  // Stable callback handlers
  const handleScrollToBottom = useStableCallback(() => {
    scrollToBottom();
    setNewMessageCount(0);
  }, [scrollToBottom]);

  const handleActionClick = useStableCallback(
    (action: AgentAction) => {
      onActionClick?.(action);
    },
    [onActionClick]
  );

  // Virtualized list data
  const virtualizedData = React.useMemo(
    () => ({
      actions: displayActions,
      onActionClick: handleActionClick,
    }),
    [displayActions, handleActionClick]
  );

  return (
    <Card className={cn("h-full relative", className)}>
      <CardHeader className="pb-3">
        <CardTitle className="flex items-center gap-2">
          <div className="w-8 h-8 rounded-lg bg-gradient-to-br from-cyan-500/10 to-blue-600/10 border border-cyan-500/20 flex items-center justify-center">
            <MessageSquare className="w-4 h-4 text-cyan-500" />
          </div>
          Agent Activity Feed
          <Badge variant="outline" className={cn("ml-auto")}>
            {actions.length} events
          </Badge>
          {isPaused && (
            <Badge
              variant="outline"
              className={cn(
                "bg-amber-500/10 text-amber-500 border-amber-500/20 animate-pulse"
              )}
            >
              Auto-scroll Paused
              {resumeCountdown && resumeCountdown > 0 && (
                <span className="ml-1 text-xs opacity-75">
                  ({Math.ceil(resumeCountdown)}s)
                </span>
              )}
            </Badge>
          )}
          {isHighFrequency && (
            <Badge
              variant="outline"
              className={cn("bg-blue-500/10 text-blue-500 border-blue-500/20")}
            >
              High Performance Mode
            </Badge>
          )}
          {shouldVirtualize && (
            <Badge
              variant="outline"
              className={cn(
                "bg-green-500/10 text-green-500 border-green-500/20"
              )}
            >
              Virtualized
            </Badge>
          )}
        </CardTitle>
      </CardHeader>
      <CardContent className="p-0 relative">
        {shouldVirtualize ? (
          // Virtualized rendering for large lists
          // Note: Using FixedSizeList with fixed itemHeight due to variable height complexity
          // For variable heights, consider using VariableSizeList with getItemSize callback
          <div className="h-[600px]">
            <List
              height={600}
              itemCount={displayActions.length}
              itemSize={itemHeight}
              itemData={virtualizedData}
              ref={scrollRef}
            >
              {VirtualizedItem}
            </List>
          </div>
        ) : (
          // Regular rendering for smaller lists
          <ScrollArea className="h-[600px] px-6 pb-6" ref={scrollRef}>
            <AnimatePresence mode="popLayout">
              {displayActions.length > 0 ? (
                <div className="space-y-3">
                  {displayActions.map((action, index) => (
                    <OptimizedActivityItem
                      key={action.id}
                      action={action}
                      index={index}
                      onClick={handleActionClick}
                    />
                  ))}
                </div>
              ) : (
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  className="flex flex-col items-center justify-center py-12 text-center"
                >
                  <div className="w-16 h-16 rounded-full bg-muted/50 flex items-center justify-center mb-4">
                    <MessageSquare className="w-8 h-8 text-muted-foreground" />
                  </div>
                  <h3 className="font-medium text-foreground mb-2">
                    No Activity Yet
                  </h3>
                  <p className="text-sm text-muted-foreground max-w-sm">
                    Agent activities will appear here as the system processes
                    incidents and performs autonomous actions.
                  </p>
                </motion.div>
              )}
            </AnimatePresence>
          </ScrollArea>
        )}

        {/* Floating Scroll Indicator */}
        <FloatingScrollIndicator
          isVisible={shouldShowScrollToBottom}
          isPaused={isPaused}
          isNearBottom={isNearBottom}
          messageCount={newMessageCount}
          onScrollToBottom={handleScrollToBottom}
          hasNewMessages={newMessageCount > 0}
        />

        {/* Resume Auto-scroll Button */}
        {isPaused && !isNearBottom && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: 20 }}
            className="absolute top-4 right-4 z-10"
          >
            <div className="bg-background/95 backdrop-blur-sm border border-border/50 rounded-lg p-2 shadow-lg">
              <div className="flex items-center gap-2 text-sm">
                <div className="flex items-center gap-1 text-amber-500">
                  <motion.div
                    animate={{ scale: [1, 1.2, 1] }}
                    transition={{ duration: 1, repeat: Infinity }}
                  >
                    <Clock className="w-3 h-3" />
                  </motion.div>
                  <span className="text-xs">
                    Auto-scroll paused
                    {resumeCountdown && resumeCountdown > 0 && (
                      <span className="ml-1 text-muted-foreground">
                        (resuming in {resumeCountdown.toFixed(1)}s)
                      </span>
                    )}
                  </span>
                </div>
                <button
                  onClick={resumeAutoScroll}
                  className="text-xs px-2 py-1 bg-primary/90 hover:bg-primary text-primary-foreground rounded transition-colors"
                >
                  Resume
                </button>
              </div>
            </div>
          </motion.div>
        )}
      </CardContent>
    </Card>
  );
}
